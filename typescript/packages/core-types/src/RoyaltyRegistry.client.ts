/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, Config, ExecuteMsg, QueryMsg, QueryBoundForString, QueryOptionsForString, NullableResidualDefault, Addr, Timestamp, Uint64, ResidualDefault, ResidualEntry, NullableResidualProtocol, ResidualProtocol, ResidualPaymentResponse, ArrayOfResidualProtocol } from "./ResidualRegistry.types";
export interface ResidualRegistryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  collectionResidualDefault: ({
    collection
  }: {
    collection: string;
  }) => Promise<NullableResidualDefault>;
  collectionResidualProtocol: ({
    collection,
    protocol
  }: {
    collection: string;
    protocol: string;
  }) => Promise<NullableResidualProtocol>;
  residualProtocolByCollection: ({
    collection,
    queryOptions
  }: {
    collection: string;
    queryOptions?: QueryOptionsForString;
  }) => Promise<ArrayOfResidualProtocol>;
  residualPayment: ({
    collection,
    protocol
  }: {
    collection: string;
    protocol?: string;
  }) => Promise<ResidualPaymentResponse>;
}
export class ResidualRegistryQueryClient implements ResidualRegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.collectionResidualDefault = this.collectionResidualDefault.bind(this);
    this.collectionResidualProtocol = this.collectionResidualProtocol.bind(this);
    this.residualProtocolByCollection = this.residualProtocolByCollection.bind(this);
    this.residualPayment = this.residualPayment.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  collectionResidualDefault = async ({
    collection
  }: {
    collection: string;
  }): Promise<NullableResidualDefault> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection_residual_default: {
        collection
      }
    });
  };
  collectionResidualProtocol = async ({
    collection,
    protocol
  }: {
    collection: string;
    protocol: string;
  }): Promise<NullableResidualProtocol> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection_residual_protocol: {
        collection,
        protocol
      }
    });
  };
  residualProtocolByCollection = async ({
    collection,
    queryOptions
  }: {
    collection: string;
    queryOptions?: QueryOptionsForString;
  }): Promise<ArrayOfResidualProtocol> => {
    return this.client.queryContractSmart(this.contractAddress, {
      residual_protocol_by_collection: {
        collection,
        query_options: queryOptions
      }
    });
  };
  residualPayment = async ({
    collection,
    protocol
  }: {
    collection: string;
    protocol?: string;
  }): Promise<ResidualPaymentResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      residual_payment: {
        collection,
        protocol
      }
    });
  };
}
export interface ResidualRegistryInterface extends ResidualRegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  initializeCollectionResidual: ({
    collection
  }: {
    collection: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setCollectionResidualDefault: ({
    collection,
    recipient,
    share
  }: {
    collection: string;
    recipient: string;
    share: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateCollectionResidualDefault: ({
    collection,
    decrement,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    recipient?: string;
    shareDelta?: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setCollectionResidualProtocol: ({
    collection,
    protocol,
    recipient,
    share
  }: {
    collection: string;
    protocol: string;
    recipient: string;
    share: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateCollectionResidualProtocol: ({
    collection,
    decrement,
    protocol,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    protocol: string;
    recipient?: string;
    shareDelta?: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ResidualRegistryClient extends ResidualRegistryQueryClient implements ResidualRegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.initializeCollectionResidual = this.initializeCollectionResidual.bind(this);
    this.setCollectionResidualDefault = this.setCollectionResidualDefault.bind(this);
    this.updateCollectionResidualDefault = this.updateCollectionResidualDefault.bind(this);
    this.setCollectionResidualProtocol = this.setCollectionResidualProtocol.bind(this);
    this.updateCollectionResidualProtocol = this.updateCollectionResidualProtocol.bind(this);
  }

  initializeCollectionResidual = async ({
    collection
  }: {
    collection: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      initialize_collection_residual: {
        collection
      }
    }, fee, memo, _funds);
  };
  setCollectionResidualDefault = async ({
    collection,
    recipient,
    share
  }: {
    collection: string;
    recipient: string;
    share: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_collection_residual_default: {
        collection,
        recipient,
        share
      }
    }, fee, memo, _funds);
  };
  updateCollectionResidualDefault = async ({
    collection,
    decrement,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    recipient?: string;
    shareDelta?: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_collection_residual_default: {
        collection,
        decrement,
        recipient,
        share_delta: shareDelta
      }
    }, fee, memo, _funds);
  };
  setCollectionResidualProtocol = async ({
    collection,
    protocol,
    recipient,
    share
  }: {
    collection: string;
    protocol: string;
    recipient: string;
    share: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_collection_residual_protocol: {
        collection,
        protocol,
        recipient,
        share
      }
    }, fee, memo, _funds);
  };
  updateCollectionResidualProtocol = async ({
    collection,
    decrement,
    protocol,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    protocol: string;
    recipient?: string;
    shareDelta?: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_collection_residual_protocol: {
        collection,
        decrement,
        protocol,
        recipient,
        share_delta: shareDelta
      }
    }, fee, memo, _funds);
  };
}